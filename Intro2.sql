-- FUNCTION
CREATE FUNCTION CUBES(@NUM INT) RETURNS INT AS 
BEGIN
	RETURN @NUM * @NUM * @NUM
END

SELECT DBO.CUBES(5)

-- TAKE EMPNO AS PARAM AND RETURN NETSAL OF EMP
CREATE FUNCTION NETSAL(@ENO AS INT) RETURNS FLOAT AS
BEGIN
	DECLARE @NETSAL FLOAT
	SELECT @NETSAL=SAL FROM EMP WHERE EMPNO=@ENO
	RETURN @NETSAL
END

SELECT DBO.NETSAL(7999)

-- CREATE FUNCTION AS PROPERNAME TAKE VARCHAR AS PARAM AND RETURN VALUE IN PROPER CASE
CREATE FUNCTION PROPERCASE(@TXT VARCHAR(80)) RETURNS VARCHAR(80) AS
BEGIN
	SELECT @TXT=(UPPER(LEFT(@TXT,1)) + LOWER(RIGHT(@TXT,LEN(@TXT)-1)))
	RETURN @TXT
END
SELECT DBO.PROPERCASE('CHANDLER')

CREATE FUNCTION DEF(@A INT=10) RETURNS INT AS  --  DEFAULT VALUES ??
BEGIN	
	RETURN @A
END
SELECT DBO.DEF(NULL)
CREATE FUNCTION DEPTFUNCTION (@DNO INT) RETURNS TABLE AS 
	RETURN (SELECT ENAME, JOB, DEPTNO FROM EMP WHERE EMP.DEPTNO=@DNO)
GO
SELECT * FROM DEPTFUNCTION(30)

CREATE FUNCTION EMPSALDETAIL(@ENO INT) RETURNS @TABLE_VAR TABLE
(
	EMPNAME VARCHAR(20),
	SALARY NUMERIC(7,2),
	COMM NUMERIC(7,2),
	NETSAL NUMERIC(7,2)
) AS 
BEGIN
	INSERT INTO @TABLE_VAR SELECT ENAME, SAL, COMM, ISNULL(SAL,0)+ISNULL(COMM,0) FROM EMP WHERE EMPNO=@ENO
	RETURN
END


-- TRANSACTION
CREATE TABLE HDFC (
	H_ACCNO VARCHAR(10) PRIMARY KEY,
	H_BALANCE NUMERIC(7,2)
)
INSERT INTO HDFC VALUES('H101', 0);
CREATE TABLE SBI (
	S_ACCNO VARCHAR(10) PRIMARY KEY,
	S_BALANCE NUMERIC(7,2)
)
INSERT INTO SBI VALUES('S201', 30000)
SELECT * FROM HDFC
SELECT * FROM SBI

ALTER PROCEDURE VARIFYACCNO(@ACCNO VARCHAR (10), @MSG CHAR(1) OUT) AS
BEGIN
	DECLARE @ACC VARCHAR (10)
	SELECT @ACC=S_ACCNO FROM SBI WHERE S_ACCNO=@ACCNO;
	IF @@ROWCOUNT=1
		SET @MSG='Y'
	ELSE
		SET @MSG='N'
END
--ASSIGNMENT	-CALL PROCEDURE AND TEST THE REPLY
declare @STATUS CHAR(1)
EXEC DBO.varifyaccno 'S201', @STATUS
PRINT @STATUS
CREATE FUNCTION CHECKBALANCE (@FROM_ACCNO VARCHAR(10), @AMOUNT NUMERIC(7,2))
RETURNS NUMERIC (7, 2) AS
BEGIN
	DECLARE @BAL NUMERIC(7,2)=-1
	SELECT @BAL= (S_BALANCE - @AMOUNT) FROM SBI WHERE S_ACCNO=@FROM_ACCNO
	RETURN @BAL
END

SELECT DBO.CHECKBALANCE('S201', 50000)

-- TEMPDB
-- 3RD HISHEST SAL
;WITH T(SAL) AS (SELECT MAX(SAL) FROM EMP)

CREATE PROC TRANSFERMONEY(@FROMACC VARCHAR(20), @TOACC VARCHAR(20), @AMOUNT NUMERIC(7,2)) AS
BEGIN
	DECLARE @BAL NUMERIC(7,2)=-1
	DECLARE @TRANSBI INT=0, @TRANSHDFC INT=0
	DECLARE @VALID CHAR(1)
	-- IS MY SBI BANK ACCOUNT IS VALID?
	EXEC DBO.VARIFYACCNO @FROMACC, @VALID OUT

	IF @VALID ='N'
		RAISERROR('FROM ACCOUNT IS NOT VALID NUMBER', 16,1)
	ELSE
	BEGIN
		-- CHECK BALANCE IN THE ACCOUNTS
		SELECT @BAL = DBO.CHECKBALANCE(@FROMACC, @AMOUNT)
		-- PRINT @BAL
		IF @BAL<0
			RAISERROR ('BALANCE NOT ENOUGH',16,2)
		ELSE
		BEGIN
			BEGIN TRANSACTION
				--DEBIT FROM SBI ACCOUNT
				UPDATE SBI SET S_BALANCE = S_BALANCE - @AMOUNT WHERE S_ACCNO=@FROMACC;
				SELECT @TRANSBI=@@ROWCOUNT
				--CREDIT IN HDFC ACcOUNT
				UPDATE HDFC SET H_BALANCE=H_BALANCE + @AMOUNT WHERE H_ACCNO=@TOACC
				SELECT @TRANSHDFC = @@ROWCOUNT
				--CHECK STATUS OF BOTH TRANSACTION
				IF @TRANSBI=1 AND @TRANSHDFC=1
				BEGIN
					COMMIT TRANSACTION
					PRINT 'TRANSACTION COMPLETED SUCCESSFULLY'
				END
				ELSE
				BEGIN
					ROLLBACK TRANSACTION
					RAISERROR ('TRANSACTION FAIL',16,3)
			END
		END
	END
END

EXEC DBO.TRANSFERMONEY 'S201', 'H101', 1000
EXEC DBO.TRANSFERMONEY 'C201', 'H101', 1000  -- WRONG SBI ACC NAME
EXEC DBO.TRANSFERMONEY 'S201', 'X101', 1000  -- WRONG HDFC ACC NAME
EXEC DBO.TRANSFERMONEY 'S201', 'H101', 60000   --EXCESS WITHDRAWAL>BAL

SELECT * FROM SBI
SELECT * FROM HDFC

-- TRIGGER

SELECT * FROM EMP
UPDATE EMP SET EMPNO=201 WHERE EMPNO=2

CREATE TRIGGER EMPNO_NOUPDATE_TRIGGER ON EMP FOR UPDATE AS
BEGIN
	IF UPDATE(EMPNO)
	BEGIN
		ROLLBACK TRANSACTION
		RAISERROR('CANNOT CHANGE VALUE OF PRIMARY KEY', 16, 1)
	END
END

-- inserted and deleted table eg
create trigger updatesalarytrigger on EMP FOR UPDATE AS
BEGIN
	IF UPDATE(SAL)
	BEGIN
		DECLARE @NEWSAL NUMERIC, @OLDSAL NUMERIC
		SELECT @NEWSAL = SAL FROM INSERTED
		SELECT @OLDSAL = SAL FROM DELETED
		IF @OLDSAL>@NEWSAL
		BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('NEW SALARY IS LESS THAN CURRENT SO ROLLBACK',16,1)
		END
	END
END
update emp set sal=3000 where empno=101

-- the day you are performing insert/update/delete/ is a wednesday then do not 
create trigger NODMLWEDNESDAYtrigger on EMP FOR insert, delete, UPDATE AS
BEGIN
	IF DATEPART(DW, GETDATE())=4
	BEGIN
		ROLLBACK TRANSACTION
		RAISERROR('NO DML ON WEDNESDAYS',16,1)
	END
END

-- TRIGGER FOR CREATING LOGS
SELECT SUSER_NAME()
CREATE TABLE LOG_TABLE(
	LOGID INT IDENTITY PRIMARY KEY,
	USERNAME VARCHAR(50),
	TABLENAME VARCHAR(30),
	OPERATION CHAR(1),
	ACTIONDATE DATETIME)

DROP TABLE TRIGNAME

CREATE TRIGGER LOGTRIGGER ON EMP
AFTER INSERT, DELETE, UPDATE AS
BEGIN
	DECLARE @I INT, @D INT
	SELECT @I=COUNT(*) FROM INSERTED
	SELECT @D=COUNT(*) FROM DELETED
	BEGIN
		IF @I>0 AND @D=0   -- INSERT
			INSERT INTO LOG_TABLE VALUES(SUSER_NAME(), 'EMP','I',GETDATE())
		IF @I>0 AND @D>0   -- UPDATE
			INSERT INTO LOG_TABLE VALUES(SUSER_NAME(), 'EMP','U',GETDATE())
		IF @I=0 AND @D>0   -- DELETE
			INSERT INTO LOG_TABLE VALUES(SUSER_NAME(), 'EMP','D',GETDATE())
	END
END
SELECT * FROM LOG_TABLE
DROP TRIGGER NODMLWEDNESDAYTRIGGER
INSERT INTO EMP(EMPNO) VALUES (100)
UPDATE EMP SET ENAME='TEST' WHERE EMPNO=100
DELETE FROM EMP WHERE EMPNO=100


SELECT EMPNO AS "S D" FROM EMP
SELECT * FROM EMP WHERE DEPTNO=(SELECT DEPTNO, DNAME FROM DEPT)

-- CTE
with t as
(
SELECT SAL, ROW_NUMBER() OVER(ORDER BY SAL DESC) rn FROM EMP
)
select SAL from T where rn = 3
-- TABLE VARIABLE
DECLARE @T TABLE (SNO INT, NAME VARCHAR(20))
INSERT INTO @T VALUES(1,'CHANDLER')
SELECT * FROM @T
-- TEMP TABLE
CREATE TABLE #T(UserID int, Name varchar(50))
insert into #T values ( 1, 'ROSS');
Select * from #T